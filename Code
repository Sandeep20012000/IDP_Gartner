import cv2 as cv
import numpy as np
import mediapipe as mp
import os
import csv
import time
from datetime import datetime
from ultralytics import YOLO

# Initialize MediaPipe for hand and face detection
mp_hands = mp.solutions.hands.Hands()
mp_face_mesh = mp.solutions.face_mesh.FaceMesh()

# Load the YOLOv8 model
model = YOLO('yolov8n.pt')  # Adjust the model version as needed

# Initialize video capture from the webcam
cap = cv.VideoCapture(0)

# Define the directory for saving CSV files
data_directory = 'Data'
if not os.path.exists(data_directory):
    os.makedirs(data_directory)

# Function to generate a new CSV filename based on the current timestamp
def generate_csv_filename():
    timestamp_str = datetime.now().strftime('%Y-%m-%d_%H-%M-%S')
    return os.path.join(data_directory, f'people_group_analysis_{timestamp_str}.csv')

# Create the initial CSV file and log the start time
csv_file = generate_csv_filename()
with open(csv_file, 'w', newline='') as file:
    writer = csv.writer(file)
    writer.writerow(['Timestamp', 'People Count', 'Group Count'])

# Track the last times data was logged and file was created
last_data_log_time = time.time()
last_file_creation_time = time.time()

# Define virtual office spaces (dividing the frame into zones)
office_spaces = [
    (0, 0, 320, 240),  # Office space 1 (Top-left quadrant)
    (320, 0, 640, 240),  # Office space 2 (Top-right quadrant)
    (0, 240, 320, 480),  # Office space 3 (Bottom-left quadrant)
    (320, 240, 640, 480)  # Office space 4 (Bottom-right quadrant)
]

# Function to count groups based on predefined office spaces
def count_groups_in_office_spaces(people, office_spaces):
    group_count = 0
    for space in office_spaces:
        people_in_space = [
            person for person in people
            if space[0] < (person[0] + person[2]) / 2 < space[2] and space[1] < (person[1] + person[3]) / 2 < space[3]
        ]
        if len(people_in_space) > 1:
            group_count += 1
    return group_count

# Main loop to capture video frames and apply YOLO detection
while True:
    ret, frame = cap.read()
    if not ret:
        print("Failed to grab frame")
        break

    # Run YOLOv8 on the frame
    results = model(frame)

    # Extract bounding boxes for 'person' class from results
    people = []
    for result in results:
        for box in result.boxes:
            if box.cls == 0:  # Class 0 corresponds to 'person'
                startX = int(box.xyxy[0][0].item())
                startY = int(box.xyxy[0][1].item())
                endX = int(box.xyxy[0][2].item())
                endY = int(box.xyxy[0][3].item())
                people.append((startX, startY, endX, endY))
                cv.rectangle(frame, (startX, startY), (endX, endY), (0, 255, 0), 2)

    # Detect hands and faces
    hand_results = mp_hands.process(cv.cvtColor(frame, cv.COLOR_BGR2RGB))
    hand_interaction = hand_results.multi_hand_landmarks is not None

    face_results = mp_face_mesh.process(cv.cvtColor(frame, cv.COLOR_BGR2RGB))
    lips_movement_count = sum(
        np.linalg.norm([lm.x - lm.x, lm.y - lm.y]) > 0.02
        for face_landmarks in face_results.multi_face_landmarks
        for lm in face_landmarks.landmark[13:15]  # Assuming landmarks 13 and 14 are around the lips
    ) if face_results.multi_face_landmarks else 0

    # Count the number of people and groups based on office spaces
    people_count = len(people)
    group_count = count_groups_in_office_spaces(people, office_spaces)
    interaction_active = people_count > 1 and (hand_interaction or lips_movement_count > 0)

    current_time = time.time()
    # Check if 15 minutes have passed to create a new CSV file
    if current_time - last_file_creation_time >= 900:
        csv_file = generate_csv_filename()
        with open(csv_file, 'w', newline='') as file:
            writer = csv.writer(file)
            writer.writerow(['Timestamp', 'People Count', 'Group Count'])
        last_file_creation_time = current_time

    # Log data once per minute
    if current_time - last_data_log_time >= 60:
        with open(csv_file, 'a', newline='') as file:
            writer = csv.writer(file)
            writer.writerow([datetime.now().strftime('%H:%M:%S'), people_count, group_count])
        last_data_log_time = current_time

    # Display the people and group counts on the frame
    cv.putText(frame, f"People Count: {people_count}", (10, 30), cv.FONT_HERSHEY_SIMPLEX, 0.6, (255, 0, 0), 2)
    cv.putText(frame, f"Group Count: {group_count}", (10, 60), cv.FONT_HERSHEY_SIMPLEX, 0.6, (255, 0, 0), 2)
    cv.putText(frame, f"Interaction Status: {'Active' if interaction_active else 'Inactive'}", (10, 90), cv.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 0), 2)

    # Show the frame with detection results
    cv.imshow('People and Group Detection (YOLOv8)', frame)

    # Check for 'q' to quit
    if cv.waitKey(1) & 0xFF == ord('q'):
        break

# Cleanup
cap.release()
cv.destroyAllWindows()
